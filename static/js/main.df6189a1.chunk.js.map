{"version":3,"sources":["components/location.tsx","components/time.tsx","layout/navbar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LocationPanel","className","TimePanel","pageSize","newDate","Date","date","getDate","listDate","index","item","day","newDay","getDay","work","id","push","this","map","value","key","React","Component","Navbar","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","style","width","placeholder","role","aria-haspopup","aria-labelledby","tabIndex","aria-disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8SAWeA,MARf,WACI,OACI,yBAAKC,UAAU,oCACX,uBAAGA,UAAU,0BADjB,kB,4BCAaC,G,6KAERC,GAIL,IAHA,IAAIC,EAAU,IAAIC,KACdC,EAAOF,EAAQG,UACfC,EAAsB,GACjBC,EAAQ,EAAGA,EAAQN,EAAUM,IAAS,CAC3C,IAAMC,EAAOJ,EAAOG,EAChBE,EAAM,aACNC,EAASR,EAAQS,SAAWJ,EAClB,IAAXG,EACCD,EAAM,aACW,IAAXC,EACND,EAAM,aACW,IAAXC,EACND,EAAM,aACW,IAAXC,EACND,EAAM,aACW,IAAXC,EACND,EAAM,aACW,IAAXC,IACND,EAAM,sBAEV,IAAIG,EAAgB,CAChBC,GAAIN,EACJH,KAAMI,EACNC,IAAKA,GAETH,EAASQ,KAAKF,GAElB,OAAON,I,+BAGP,OACI,yBAAKP,UAAU,gEAEPgB,KAAKT,SAAS,IAAIU,KAAI,SAAAC,GAClB,OACI,yBAAKlB,UAAU,OAAOmB,IAAKD,EAAMJ,IAC7B,yBAAKd,UAAU,OAAOkB,EAAMR,KAC3BQ,EAAMb,c,GAxCAe,IAAMC,YC0C9BC,MA7Cf,WACI,OACI,yBAAKtB,UAAU,2DACX,uBAAGA,UAAU,qBAAqBuB,KAAK,MAAvC,UACA,4BAAQvB,UAAU,iBAAiBwB,KAAK,SAASC,cAAY,WAAWC,cAAY,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBAClL,0BAAM7B,UAAU,yBAGpB,yBAAKA,UAAU,4BACX,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,cAAc8B,MAAO,CAAEC,MAAO,MACzC,yBAAK/B,UAAU,uBACX,0BAAMA,UAAU,gCAA+B,uBAAGA,UAAU,oBAEhE,2BAAOwB,KAAK,SAASQ,YAAY,+BAAkBhC,UAAU,4BAEjE,wBAAIA,UAAU,cACV,wBAAIA,UAAU,mBACV,uBAAGA,UAAU,WAAWuB,KAAK,MAA7B,QAAuC,0BAAMvB,UAAU,WAAhB,eAE3C,wBAAIA,UAAU,YACV,uBAAGA,UAAU,WAAWuB,KAAK,MAA7B,SAEJ,wBAAIvB,UAAU,qBACV,uBAAGA,UAAU,2BAA2BuB,KAAK,KAAKT,GAAG,iBAAiBmB,KAAK,SAASR,cAAY,WAAWS,gBAAc,OAAON,gBAAc,SAA9I,YAGA,yBAAK5B,UAAU,gBAAgBmC,kBAAgB,kBAC3C,uBAAGnC,UAAU,gBAAgBuB,KAAK,MAAlC,UACA,uBAAGvB,UAAU,gBAAgBuB,KAAK,MAAlC,kBACA,yBAAKvB,UAAU,qBACf,uBAAGA,UAAU,gBAAgBuB,KAAK,MAAlC,yBAGR,wBAAIvB,UAAU,YACV,uBAAGA,UAAU,oBAAoBuB,KAAK,KAAKa,UAAW,EAAGC,gBAAc,QAAvE,eAIZ,yBAAKrC,UAAU,QAAf,c,MCRDsC,MA3Bf,WACE,OACE,yBAAKtC,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,kBACb,4BAAQA,UAAU,gCAAlB,YAGA,4BAAQA,UAAU,2BAAlB,eAIF,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,aACb,kBAAC,EAAD,WCZQuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.df6189a1.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../style/location.scss';\r\n\r\nfunction LocationPanel() {\r\n    return (\r\n        <div className=\"location-panel shadow-sm rounded\">\r\n            <i className=\"fas fa-map-marker-alt\"></i> Chi Nhánh\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LocationPanel\r\n","import React from 'react';\r\nimport WorkDay from '../models/workDay';\r\nimport '../style/location.scss';\r\nimport '../style/time.scss';\r\n\r\nexport default class TimePanel extends React.Component {\r\n\r\n    listDate(pageSize: number): WorkDay[] {\r\n        let newDate = new Date();\r\n        let date = newDate.getDate();\r\n        let listDate: WorkDay[] = [];\r\n        for (let index = 0; index < pageSize; index++) {\r\n            const item = date + index;\r\n            let day = 'Thứ 2';\r\n            let newDay = newDate.getDay() + index;\r\n            if(newDay === 2) {\r\n                day = 'Thứ 3'\r\n            } else if(newDay === 3) {\r\n                day = 'Thứ 4'\r\n            } else if(newDay === 4) {\r\n                day = 'Thứ 5'\r\n            } else if(newDay === 5) {\r\n                day = 'Thứ 6'\r\n            } else if(newDay === 6) {\r\n                day = 'Thứ 7'\r\n            } else if(newDay === 7) {\r\n                day = 'Chủ nhật'\r\n            }\r\n            let work: WorkDay = {\r\n                id: index,\r\n                date: item,\r\n                day: day\r\n            };\r\n            listDate.push(work);\r\n        }\r\n        return listDate;\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"shadow-sm bg-white d-flex justify-content-between time-panel\">\r\n                {\r\n                    this.listDate(10).map(value => {\r\n                        return (\r\n                            <div className=\"date\" key={value.id}>\r\n                                <div className=\"day\">{value.day}</div>\r\n                                {value.date}\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-white shadow-sm\">\r\n            <a className=\"navbar-brand col-2\" href=\"#a\">Navbar</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n\r\n            <div className=\"collapse navbar-collapse\">\r\n                <div className=\"flex-grow-1 d-flex\">\r\n                    <div className=\"input-group\" style={{ width: 260 }}>\r\n                        <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text search-icon\"><i className=\"fas fa-search\"></i></span>\r\n                        </div>\r\n                        <input type=\"search\" placeholder=\"Nhập từ khóa...\" className=\"searchBar form-control\" />\r\n                    </div>\r\n                    <ul className=\"navbar-nav\">\r\n                        <li className=\"nav-item active\">\r\n                            <a className=\"nav-link\" href=\"#a\">Home <span className=\"sr-only\">(current)</span></a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"#a\">Link</a>\r\n                        </li>\r\n                        <li className=\"nav-item dropdown\">\r\n                            <a className=\"nav-link dropdown-toggle\" href=\"#a\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                Dropdown\r\n                        </a>\r\n                            <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                                <a className=\"dropdown-item\" href=\"#a\">Action</a>\r\n                                <a className=\"dropdown-item\" href=\"#a\">Another action</a>\r\n                                <div className=\"dropdown-divider\"></div>\r\n                                <a className=\"dropdown-item\" href=\"#a\">Something else here</a>\r\n                            </div>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link disabled\" href=\"#a\" tabIndex={-1} aria-disabled=\"true\">Disabled</a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <div className=\"user\">Account</div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\nimport LocationPanel from './components/location';\nimport TimePanel from './components/time';\nimport Navbar from './layout/navbar';\nimport './style/global.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <div className=\"text-right p-4\">\n        <button className=\"btn btn-light shadow-sm mr-3\">\n          SCHEDULE\n        </button>\n        <button className=\"btn btn-light shadow-sm\">\n          SELL GOODS\n        </button>\n      </div>\n      <div className=\"p-4\">\n        <div className=\"row\">\n          <div className=\"col-md-2\">\n            <LocationPanel/>\n          </div>\n          <div className=\"col-md-10\">\n            <TimePanel/>\n          </div>\n\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}